{"version":3,"sources":["components/Nav.js","components/Home.js","components/accounts/TableRow.js","data.js","components/accounts/Table.js","components/accounts/Checking.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Nav","id","to","Component","Home","state","TableRow","this","props","data","date","description","amount","className","checking","ageInDays","axios","get","url","timeout","Promise","resolve","reject","setTimeout","getData","filter","transaction","Table","getTableData","then","transactions","setState","tableData","transactionKey","mappedTransactions","map","tr","key","Checking","exact","path","component","App","routes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c92d26c6.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\n\nclass Nav extends Component{\n\n  render() {\n    return(\n      <div id=\"nav-bar\">\n        <p>First National Fake</p>\n        <div>\n          <Link to='/'><button>Home</button></Link>\n          <Link to='/checking'><button>Checking</button></Link>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Nav","import React, {Component} from 'react'\n\nclass Home extends Component{\n  constructor(){\n    super()\n    this.state = {\n\n    }\n  }\n\n  render() {\n\n    return(\n      <div>\n        <h3>This is the Home Page</h3>\n      </div>\n    )\n  }\n\n}\n\nexport default Home","import React, {Component} from 'react'\n\nexport default class TableRow extends Component{\n  \n  render(){\n    const {date, description, amount} = this.props.data\n    return(\n      <tr className=\"transaction\">\n        <td className=\"transaction-date\">{date}</td>\n        <td className=\"transaction-desc\">{description}</td>\n        <td className=\"transaction-amount\">{amount}</td>\n      </tr>\n    )\n  }\n}","const todaysDate = \"09/03/2018\" //not that this matters haha\n\nconst checking = [\n  { \n    date:'09/01/2018',\n    description:'Costa Vida',\n    amount:'($15.75)',\n    ageInDays: 2\n  },\n  { \n    date:'09/02/2018',\n    description:'Costco',\n    amount:'($500.50)',\n    ageInDays: 1\n  },\n  { \n    date:'09/03/2018',\n    description:'Payday',\n    amount:'$1500.22', \n    ageInDays: 0\n  },\n  { \n    date:'08/01/2018',\n    description:'Costa Vida',\n    amount:'($15.75)',\n    ageInDays: 32\n  },\n  { \n    date:'07/02/2018',\n    description:'Costco',\n    amount:'($500.50)',\n    ageInDays: 61\n  },\n  { \n    date:'04/03/2018',\n    description:'Payday',\n    amount:'$1500.22', \n    ageInDays: 150\n  }\n]\n\nconst axios = {\n  get: function (url, timeout) {\n    return new Promise(function(resolve, reject) {\n      return setTimeout(() => {\n        resolve(getData(url))\n      }, 2000)\n    })\n  }\n}\n\nconst getData = (url) => {\n  if(url === ('/checking/30')){\n    return checking.filter((transaction) => {\n      return transaction.ageInDays < 30\n    })\n  } else if (url === '/checking/90') {\n      return checking.filter((transaction) => {\n        return transaction.ageInDays < 90\n      })\n  }\n}\n\nexport { axios }","import React, {Component} from 'react'\nimport TableRow from './TableRow'\nimport {axios} from './../../data'\n\nexport default class Table extends Component{\n  constructor(props){\n    super(props)\n    this.state={\n      tableData: []\n    }\n  }\n\n  async componentDidMount(){\n    await this.getTableData()\n  }\n\n  getTableData = () => {\n    axios.get('/checking/30', 2000).then((transactions) => {\n      this.setState({\n        tableData:transactions\n      })\n      axios.get('/checking/90', 2000).then((transactions) => {\n        this.setState({\n          tableData:transactions\n        })\n      })\n    })\n  }\n\n  render(){\n    let transactionKey = 0\n    const mappedTransactions = this.state.tableData.map( tr => {\n      transactionKey += 1\n      return <TableRow data={tr} key={transactionKey}/>\n    })\n    return(\n      <table>\n        <thead>\n          <tr className=\"title-row\">\n            <th>Date</th>\n            <th>Description</th>\n            <th>Amount</th>\n          </tr>\n        </thead>\n        <tbody>\n        {mappedTransactions}\n        </tbody>\n      </table>\n    )\n  }\n}","import React, {Component} from 'react'\nimport Table from './Table'\n\nexport default class Checking extends Component{\n  constructor(){\n    super()\n    this.state = {\n\n    }\n  }\n\n  render(){\n    return(\n    <div className=\"checking-container\">\n      <div className=\"balance-container\">\n        <h2>Checking Balance</h2>\n        <h2 className=\"balance\">$10,123.45</h2>\n      </div>\n      <div className=\"account-number-container\">\n        <h4>Account Number: </h4>\n        <h4 className=\"account-number\">246813579</h4>\n      </div>\n        <div className=\"transactions-container\">\n          <Table/>\n        </div>\n      </div>\n    )\n  }\n\n}","import React from 'react'\nimport {Switch, Route} from 'react-router-dom'\nimport Home from './components/Home'\nimport Checking from './components/accounts/Checking'\n\nexport default(\n  <Switch>\n    <Route exact path ='/' component={Home}/>\n    <Route path='/checking' component={Checking}/>\n  </Switch>\n)","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav'\nimport routes from './routes'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <Nav/>\n      </header>\n      {routes}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}